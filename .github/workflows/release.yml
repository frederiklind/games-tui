#
#   ╔═╗────────╔═╗──╔╦═╦╗───╔╗╔═╗
#   ║╬╠═╦╗╔═╦═╗║═╬═╗║║║║╠═╦╦╣╠╣═╬╗╔═╦╦╦╗
#   ║╗╣╩╣╚╣╩╣╬╚╬═║╩╣║║║║║╬║╔╣═╣╔╣╚╣╬║║║║
#   ╚╩╩═╩═╩═╩══╩═╩═╝╚═╩═╩═╩╝╚╩╩╝╚═╩═╩══╝
#
#   Github release workflow
#

name: Release

on:
  # push:
  #   branches: [ "master" ]
  # pull_request:
  #   branches: [ "master" ]

env:
  RELEASE_VERSION: 1.0.0
  RELEASE_NOTES: "New release for version 1.0.0"

permissions:
  contents: write

jobs:
  
  #
  #   ╔╗──╔╗──╔╗
  #   ║╚╦╦╬╬╗╔╝║
  #   ║╬║║║║╚╣╬║
  #   ╚═╩═╩╩═╩═╝
  #
  
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest ]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v3
      with:
        python-version: "3.13"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pyinstaller
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      shell: bash

    - name: Run Unit-tests
      run: pytest

    # - name: Build binary for each platform
    #   run: |
    #     pyinstaller --onefile --name games-tui src/games_tui/main.py
    #   shell: bash
    #   if: runner.os != 'Windows'
    #
    # - name: Build binary for Windows
    #   run: |
    #     pyinstaller --onefile --windowed --name games-tui src/games_tui/main.py
    #   shell: pwsh
    #   if: runner.os == 'Windows'
    #
    # - name: Package release for Linux and macOS
    #   run: |
    #     mkdir release
    #     cp Makefile release/
    #     cp -r dist/games-tui release/
    #     cp -r data release/              
    #     cp -r config release/
    #     tar -czf games-tui-${{ runner.os }}.tar.gz -C release .
    #   shell: bash
    #   if: runner.os != 'Windows'
    #
    #
    # - name: Package release for Windows
    #   run: |
    #     mkdir release
    #     cp Makefile release\
    #     cp dist\games-tui.exe release\
    #     cp -r config release\config
    #     cp -r data release\
    #     Compress-Archive -Path release\* -DestinationPath games-tui-${{ runner.os }}.zip
    #   shell: pwsh
    #   if: runner.os == 'Windows'
    #
    # - name: Upload release artifacts
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: games-tui-${{ runner.os }}
    #     path: |
    #       games-tui-*.tar.gz
    #       games-tui-*.zip

  #
  #   ╔═╗────────╔═╗──╔══╗
  #   ║╬╠═╦╗╔═╦═╗║═╬═╗╚╗╔╩╗╔═╗
  #   ║╗╣╩╣╚╣╩╣╬╚╬═║╩╣─║║╬╚╣╬║
  #   ╚╩╩═╩═╩═╩══╩═╩═╝─╚╩══╬╗║
  #   ─────────────────────╚═╝
  #

  create_tag:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4

    - name: Set Git user identity
      run: |
        git config --global user.email "frederiklind@noreply.com"
        git config --global user.name "Frederik Lind"

    - name: Delete existing remote tag if it exists
      run: |
        git tag -d "${{ env.RELEASE_VERSION }}" || echo "No local tag to delete"
        git push --delete origin "${{ env.RELEASE_VERSION }}" || echo "No remote tag to delete"

    - name: Create Git tag
      run: |
        git tag -a "${{ env.RELEASE_VERSION }}" -m "Release version ${{ env.RELEASE_VERSION }}"
        git push origin "${{ env.RELEASE_VERSION }}"

  # 
  #   ╔═╗────────╔═╗
  #   ║╬╠═╦╗╔═╦═╗║═╬═╗
  #   ║╗╣╩╣╚╣╩╣╬╚╬═║╩╣
  #   ╚╩╩═╩═╩═╩══╩═╩═╝
  #
   



  release:
    runs-on: ubuntu-latest
    needs: create_tag
    steps:
      - uses: actions/checkout@v4

      - name: Fetch tags to ensure the tag is available
        run: git fetch --tags

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: source-code  # Must match the upload artifact name
          path: artifacts

      - name: Rename source code archive
        run: |
          TAG_NAME=${{ env.RELEASE_VERSION }}
          mv artifacts/source-code.tar.gz artifacts/games-tui-${TAG_NAME}.tar.gz

      - name: Generate SHA-256 checksum
        run: |
          TAG_NAME=${{ env.RELEASE_VERSION }}
          sha256sum artifacts/games-tui-${TAG_NAME}.tar.gz | awk '{print $1}' > artifacts/games-tui-${TAG_NAME}.sha256

      - name: Create GitHub release and upload assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "${{ env.RELEASE_VERSION }}"
          files: |
            artifacts/games-tui-${{ env.RELEASE_VERSION }}.tar.gz
            artifacts/games-tui-${{ env.RELEASE_VERSION }}.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



  #
  #   ╔╗╔╗──────╔╗        
  #   ║╚╝╠═╦══╦═╣╚╦╦╦═╦╦╦╗
  #   ║╔╗║╬║║║║╩╣╬║╔╣╩╣║║║
  #   ╚╝╚╩═╩╩╩╩═╩═╩╝╚═╩══╝
  # 

  # update_homebrew:
  #   runs-on: ubuntu-latest
  #   needs: release
  #   steps:
  #   - name: Clone Homebrew Tap
  #     run: |
  #       git clone https://github.com/frederiklind/homebrew-frederiklind.git homebrew-tap
  #       cd homebrew-tap
  #       git config user.name "Frederik Lind"
  #       git config user.email "frederiklind@noreply.com"
  #
  #   - name: Download the new release and compute SHA256
  #     run: |
  #       RELEASE_URL="https://github.com/frederiklind/games-tui/releases/download/${{ env.RELEASE_VERSION }}/games-tui-ubuntu-latest.tar.gz"
  #       wget -O games-tui.tar.gz "$RELEASE_URL"
  #       SHA256=$(sha256sum games-tui.tar.gz | awk '{ print $1 }')
  #
  #       echo "RELEASE_URL=$RELEASE_URL" >> $GITHUB_ENV
  #       echo "SHA256=$SHA256" >> $GITHUB_ENV
  #
  #   - name: Update Homebrew Formula
  #     run: |
  #       cd homebrew-tap/Formula
  #       FORMULA_FILE=games-tui.rb
  #
  #       # Update version, URL, and SHA256
  #       sed -i "s/version .*/version \"${{ env.RELEASE_VERSION }}\"/" $FORMULA_FILE
  #       sed -i "s|url .*|url \"${{ env.RELEASE_URL }}\"|" $FORMULA_FILE
  #       sed -i "s/sha256 .*/sha256 \"${{ env.SHA256 }}\"/" $FORMULA_FILE
  #
  #   - name: Commit and push Homebrew update
  #     run: |
  #       cd homebrew-tap
  #       git add Formula/games-tui.rb
  #       git commit -m "Update games-tui formula to version ${{ env.RELEASE_VERSION }}"
  #       git push origin master
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.PUBLISHER_TOKEN }}
  #

  # release:
  #   runs-on: ubuntu-latest
  #   needs: create_tag
  #   steps:
  #   - uses: actions/checkout@v4
  #
  #   - name: Fetch tags to ensure the tag is available
  #     run: git fetch --tags
  #
  #   - name: Download release artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       path: artifacts
  #
  #   - name: Create GitHub release and upload assets
  #     uses: softprops/action-gh-release@v1
  #     with:
  #       tag_name: "${{ env.RELEASE_VERSION }}"
  #       files: artifacts/**/*
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
