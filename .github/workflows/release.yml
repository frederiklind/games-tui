name: Release

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  RELEASE_VERSION: v0.0.1
  RELEASE_NOTES: "New release for version v0.0.1"

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.13
      uses: actions/setup-python@v3
      with:
        python-version: "3.13"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      shell: bash
    - name: Test with pytest
      run: |
        pytest
    - name: Install PyInstaller
      run: |
        pip install pyinstaller
    - name: Build binary for Ubuntu/MacOS
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" || "${{ matrix.os }}" == "macos-latest" ]]; then
          pyinstaller --onefile src/games_tui/main.py
        fi
      shell: bash
      if: runner.os != 'Windows'
      
    - name: Build binary for Windows
      run: |
        if ($env:RUNNER_OS -eq "Windows") {
          pyinstaller --onefile --windowed src/games_tui/main.py
        }
      shell: pwsh
      if: runner.os == 'Windows'
      
    - name: Set output for binaries
      id: set-binary-output
      run: |
        echo "ubuntu_binary=dist/games-tui" >> $GITHUB_ENV
        echo "macos_binary=dist/games-tui" >> $GITHUB_ENV
        echo "windows_binary=dist/games-tui.exe" >> $GITHUB_ENV

  create_tag:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    - name: Set Git user identity
      run: |
        git config --global user.email "frederiklind@noreply.com"
        git config --global user.name "Frederik Lind"
    - name: Delete existing remote tag if it exists
      run: |
        git tag -d "${{ env.RELEASE_VERSION }}" || echo "No local tag to delete"
        git push --delete origin "v${{ env.RELEASE_VERSION }}" || echo "No remote tag to delete"
    - name: Create Git tag
      run: |
        git tag -a "${{ env.RELEASE_VERSION }}" -m "Release version ${{ env.RELEASE_VERSION }}"
        git push origin "${{ env.RELEASE_VERSION }}"

  release:
    runs-on: ubuntu-latest
    needs: create_tag
    steps:
    - uses: actions/checkout@v4
    - name: Fetch tags to ensure the tag is available
      run: git fetch --tags
    - name: Create GitHub release and upload assets
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "${{ env.RELEASE_VERSION }}"
        # files: |
        #   dist/games-tui  # This will point to the correct binary (check the dist folder)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



# name: Release
#
# on:
#   push:
#     branches: [ "master" ]
#   pull_request:
#     branches: [ "master" ]
#
# env:
#   RELEASE_VERSION: v0.0.1
#   RELEASE_NOTES: "New release for version v0.0.1"
#
# permissions:
#   contents: write
#
# jobs:
#   build:
#     runs-on: ${{ matrix.os }}
#     strategy:
#       matrix:
#         os: [ubuntu-latest, macos-latest, windows-latest]
#       fail-fast: false
#
#     steps:
#     - uses: actions/checkout@v4
#     - name: Set up Python 3.13
#       uses: actions/setup-python@v3
#       with:
#         python-version: "3.13"
#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install pytest
#         if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#       shell: bash
#     - name: Test with pytest
#       run: |
#         pytest
#     - name: Install PyInstaller
#       run: |
#         pip install pyinstaller
#     - name: Build binary for Ubuntu/MacOS
#       run: |
#         if [[ "${{ matrix.os }}" == "ubuntu-latest" || "${{ matrix.os }}" == "macos-latest" ]]; then
#           pyinstaller --onefile src/games_tui/main.py
#         fi
#       shell: bash
#       if: runner.os != 'Windows'
#       
#     - name: Build binary for Windows
#       run: |
#         if ($env:RUNNER_OS -eq "Windows") {
#           pyinstaller --onefile --windowed src/games_tui/main.py
#         }
#       shell: pwsh
#       if: runner.os == 'Windows'
#       
#     - name: Set output for binaries
#       id: set-binary-output
#       run: |
#         echo "ubuntu_binary=dist/games-tui" >> $GITHUB_ENV
#         echo "macos_binary=dist/games-tui" >> $GITHUB_ENV
#         echo "windows_binary=dist/games-tui.exe" >> $GITHUB_ENV
#
#   create_tag:
#     runs-on: ubuntu-latest
#     needs: build
#     steps:
#     - uses: actions/checkout@v4
#     - name: Set Git user identity
#       run: |
#         git config --global user.email "frederiklind@noreply.com"
#         git config --global user.name "Frederik Lind"
#     - name: Delete existing remote tag if it exists
#       run: |
#         git tag -d "${{ env.RELEASE_VERSION }}" || echo "No local tag to delete"
#         git push --delete origin "v${{ env.RELEASE_VERSION }}" || echo "No remote tag to delete"
#     - name: Create Git tag
#       run: |
#         git tag -a "${{ env.RELEASE_VERSION }}" -m "Release version ${{ env.RELEASE_VERSION }}"
#         git push origin "${{ env.RELEASE_VERSION }}"
#
#   release:
#     runs-on: ubuntu-latest
#     needs: create_tag
#     steps:
#     - uses: actions/checkout@v4
#     - name: Fetch tags to ensure the tag is available
#       run: git fetch --tags
#     - name: Prepare directory structure
#       run: |
#         mkdir -p release/{bin,config,data}
#         cp dist/games-tui release/bin/
#         cp ./config/* release/config/  # Include any config files here
#         cp ./data/* release/data/      # Include any data files here
#     - name: Create tarball for release
#       run: |
#         tar -czf games-tui-${{ env.RELEASE_VERSION }}-linux.tar.gz -C release .
#         # Optional: Create a zip file as well if needed
#         zip -r games-tui-${{ env.RELEASE_VERSION }}-linux.zip release/
#     - name: Create GitHub release and upload assets
#       uses: softprops/action-gh-release@v1
#       with:
#         tag_name: "${{ env.RELEASE_VERSION }}"
#         files: |
#           games-tui-${{ env.RELEASE_VERSION }}-linux.tar.gz
#           games-tui-${{ env.RELEASE_VERSION }}-linux.zip
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#   brews:
#     -
#       name: frederiklind
#       homepage: https://github.com/frederiklind/games-tui
#       tap:
#         owner: frederiklind
#         name: homebrew-frederiklind
#       commit-author:
#         name: frederiklind
#         email: frederiklind@noreply.com
#
